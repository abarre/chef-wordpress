vcl 4.0;

backend default {
        .host = "<%= node['varnish']['backend_host'] %>";
        .port = "<%= node['varnish']['backend_port'] %>";
        .first_byte_timeout = 300s;
}

acl purge {
  "localhost";
  "127.0.0.1";
  "<%= node.ipaddress %>";
}

sub vcl_recv {
  if (req.url ~ "pagespeed") {
      # Skip the cache for .pagespeed. resource.  PageSpeed has its own
      # cache for these, and these could bloat up the caching layer.
      return (pass);
  }

  if (req.url == "/monit-check") {
      return(synth(200,"Varnish up"));
  }

  if (req.restarts == 0) {
    if (req.http.x-forwarded-for) {
      set req.http.X-Forwarded-For =
        req.http.X-Forwarded-For + ", " + client.ip;
    } else {
      set req.http.X-Forwarded-For = client.ip;
    }
  }

  if (req.method == "PURGE") {
    if(!client.ip ~ purge) {
      return(synth(405, "Not allowed." + client.ip));
    }

    if (req.http.X-Purge-Method) {
      if (req.http.X-Purge-Method == "regex") {
        ban("req.http.host == " + req.http.host + " && req.url ~ " + req.url);
        return(synth(200, "Ban added"));
      }
    }

    return(purge);
  }

  if (req.method != "GET" &&
    req.method != "HEAD" &&
    req.method != "PUT" &&
    req.method != "POST" &&
    req.method != "TRACE" &&
    req.method != "OPTIONS" &&
    req.method != "DELETE") {

    /* Non-RFC2616 or CONNECT which is weird. */
    return (pipe);
  }

  # Do not cache POST request
  if (req.method == "POST") {
      return (pipe);
  }

  if (req.method != "GET" && req.method != "HEAD") {
    /* We only deal with GET and HEAD by default */
    return (pass);
  }

  # Normalize the "Accept-Encoding" headers
  if (req.http.Accept-Encoding) {
    if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {
      # No point in compressing these
      unset req.http.Accept-Encoding;
    } elsif (req.http.Accept-Encoding ~ "gzip") {
      set req.http.Accept-Encoding = "gzip";
    } elsif (req.http.Accept-Encoding ~ "deflate" && req.http.user-agent !~ "MSIE") {
      set req.http.Accept-Encoding = "deflate";
    } else {
      # unkown algorithm
      unset req.http.Accept-Encoding;
    }
  }

  #  Pipe possibly large-sized objects; except sitemaps
  if (req.url ~ "^[^?]*\.(zip|tar|gz|tgz|bz2|mp[34]|pdf|rar|rtf|swf|wav)(\?.*)?$") {
    if (req.url ~ "sitemap") {
      return (pass);
    }
    else {
      return (pipe);
    }
  }

  # Check the admin pages
  if (req.url ~ "wp-(login|admin)" || req.url ~ "preview=true") {
    return (pass);
  }

  # Contact Pages
  if (req.url ~ "contact") {
    return (pass);
  }

  #woocommerce
  if (req.url ~ "^/(panier|mon-compte|commande|addons)") {
   return (pass);
  }

  if ( req.url ~ "\?warm_cache=") {
    return (pass);
  }

  if ( req.url ~ "\?add-to-cart=" ) {
   return (pass);
  }

  # don't cache ajax requests
  if (req.http.X-Requested-With == "XMLHttpRequest") {
      return (pipe);
  }

  # Images
  if (req.url ~ "\.(jpg|jpeg|png|gif|ico|tiff|tif|bmp|ppm|pgm|xcf|psd|webp|svg)") {
    return (pass);
  }

  # CSS & JS
  if (req.url ~ "\.(css|js)") {
    return (pass);
  }


  # HTML & text
  if (req.url ~ "\.(html?|txt)") {
    return(pass);
  }


  # Fonts
  if (req.url ~ "\.(woff|eot|otf|ttf)") {
    return (pass);
  }


  # Other static content
  if (req.url ~ "\.(zip|sql|tar|gz|bzip2)") {
    return (pass);
  }

  # Check the cookies for wordpress-specific cookies
  unset req.http.cookie;

  # custom rules
  return (hash);
}

sub vcl_backend_response {

  #set cookie only with POST request.
  unset beresp.http.set-cookie;
  unset beresp.http.cookie;

  # Admin pages
  if (bereq.url ~ "wp-(login|admin)" || bereq.url ~ "preview=true") {
    set beresp.http.X-Cacheable = "NO: User is logged-in!";
    set beresp.http.Cache-Control = "max-age=0";
    set beresp.uncacheable = true;
    return (deliver);
  }

  #woocommerce
  if (bereq.url ~ "^/(panier|mon-compte|commande|addons)") {
    set beresp.http.X-Cacheable = "NO: User has a cart";
    set beresp.http.Cache-Control = "max-age=0";
    set beresp.uncacheable = true;
    return (deliver);
  }

  if ( bereq.url ~ "\?add-to-cart=" ) {
    set beresp.http.X-Cacheable = "NO: User has a cart";
    set beresp.http.Cache-Control = "max-age=0";
    set beresp.uncacheable = true;
    return (deliver);
  }

  # PHP
  if (bereq.url ~ "\.php$") {
    set beresp.http.X-Cacheable = "NO: PHP!";
    set beresp.uncacheable = true;
    return (deliver);
  }

  # Contact Pages
  if (bereq.url ~ "contact") {
    set beresp.http.X-Cacheable = "NO: Contact Page";
    set beresp.uncacheable = true;
    return (deliver);
  }


  # If backend response is NOT 200.
  if (beresp.status != 200) {
    set beresp.http.Cache-Control = "max-age=0";
    set beresp.http.X-Cacheable = "NO: Backend HTTP response is not 200";
    set beresp.uncacheable = true;
    return (deliver);
  }

# Note #1 - Make sure, you have conf.d/receive/pagespeed.vcl in vcl_receive
  if (bereq.url ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+") {
    set beresp.http.X-Cacheable = "No: Pagespeed";
    set beresp.uncacheable = true;
    return (deliver);
  }

  # Images
  if (bereq.url ~ "\.(jpg|jpeg|png|gif|ico|tiff|tif|bmp|ppm|pgm|xcf|psd|webp|svg)") {
    set beresp.http.X-Cacheable = "NO: Images aren't cached";
    set beresp.uncacheable = true;
    return (deliver);
  }

  # CSS & JS
  if (bereq.url ~ "\.(css|js)") {
    set beresp.http.X-Cacheable = "NO: CSS & JS files aren't cached";
    set beresp.uncacheable = true;
    return (deliver);
  }

  # HTML & Text files
  if (bereq.url ~ "\.(html?|txt)") {
    set beresp.http.X-Cacheable = "NO: HTML & text files aren't cached";
    set beresp.uncacheable = true;
    return (deliver);
  }

  # Fonts
  if (bereq.url ~ "\.(woff|eot|otf|ttf)") {
    set beresp.http.X-Cacheable = "NO: Webfonts aren't cached";
    set beresp.uncacheable = true;
    return (deliver);
  }

  # Other static content
  if (bereq.url ~ "\.(zip|sql|tar|gz|bzip2|mp3|mp4|flv|ogg|swf)") {
    set beresp.http.X-Cacheable = "NO: Misc files aren't cached";
    set beresp.uncacheable = true;
    return (deliver);
  }

  # if a requests reaches this stage, then it is cacheable
  set beresp.http.X-Cacheable = "YES - SHORT";
  set beresp.http.Cache-Control = "max-age=600, must-revalidate";

  set beresp.ttl = 24d;

  return (deliver);
}

sub vcl_deliver {
  # Display the number of hits
  if (resp.http.x-varnish ~ " ") {
      set resp.http.X-Cache = "HIT";
      set resp.http.X-Cache-Hits = obj.hits;
  } else {
      set resp.http.X-Cache = "MISS";
  }

  # Comment the following while doing maintenance
  unset resp.http.Server;
  unset resp.http.X-Varnish;
  unset resp.http.Via;
  unset resp.http.Age;
  # unset resp.http.X-Cacheable;
  # unset resp.http.X-Cache;
  unset resp.http.X-Powered-By;
  unset resp.http.X-Page-Speed;

  return (deliver);
}
